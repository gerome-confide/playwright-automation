name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-production:
    name: Test Production Environment
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'confide/package-lock.json'
      - name: Install dependencies
        working-directory: ./confide
        run: npm ci
      - name: Install Playwright browsers
        working-directory: ./confide
        run: npx playwright install --with-deps
      - name: Run Production tests
        working-directory: ./confide
        run: |
          echo "=== Running Production Tests ==="
          echo "Available projects:"
          npx playwright test --config=playwright.config.ci.simple.js --list
          echo "Running production tests..."
          npx playwright test --config=playwright.config.ci.simple.js --project=production-chrome
          echo "=== Test execution completed ==="
          echo "Checking for results files:"
          find . -name "*.json" -type f | head -10
        env:
          CI: true
      - name: Upload Production test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-test-results
          path: confide/test-results/
          retention-days: 30

  test-staging:
    name: Test Staging Environment
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'confide/package-lock.json'
      - name: Install dependencies
        working-directory: ./confide
        run: npm ci
      - name: Install Playwright browsers
        working-directory: ./confide
        run: npx playwright install --with-deps
      - name: Run Staging tests
        working-directory: ./confide
        run: |
          echo "=== Running Staging Tests ==="
          echo "Available projects:"
          npx playwright test --config=playwright.config.ci.simple.js --list
          echo "Running staging tests..."
          npx playwright test --config=playwright.config.ci.simple.js --project=staging-chrome
          echo "=== Test execution completed ==="
          echo "Checking for results files:"
          find . -name "*.json" -type f | head -10
        env:
          CI: true
      - name: Upload Staging test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-test-results
          path: confide/test-results/
          retention-days: 30

  # Slack Notifications
  notify:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: [test-production, test-staging]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Production test results
        uses: actions/download-artifact@v4
        if: always()
        with:
          name: production-test-results
          path: production-results/
      
      - name: Download Staging test results
        uses: actions/download-artifact@v4
        if: always()
        with:
          name: staging-test-results
          path: staging-results/
      
      - name: Parse test results and send notification
        run: |
          cd confide
          node scripts/parse-test-results.js
          
          # Send notification using curl
          MESSAGE=$(cat slack-message.txt)
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"channel\":\"playwright-automation-reports\",\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
